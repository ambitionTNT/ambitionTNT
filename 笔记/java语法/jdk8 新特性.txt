1、HashMap:在Hash 表的集合中，如果 单一链表的长度>8 并且 hashTable的总容量>64时，
	Hash表将转变成红黑树 查询的效率就会变高
2、HashSet 也发生了变化
3、ConcurrentHashMap：采用了CAS算法，所有表中的内容 采用了 Hash算法吗，没有锁，以及隔离级别。

4、内存结构也发生了改变：jdk之前：方法区 为堆内存的一部分称为永久区。方法区也是可以回收的，条件比较苛刻
常用的jvm：oracle - SUN Hotspot
	    oracle -JRocket
	   IBM J9 JVM
	   Taobao jvm
	  在jdk8之后 就没有永久区了，取而代之的是 元空间(MetaSpace)采用。参数变为：MetaSpacesize MaxMetaSpacesize
	  物理内存

5、速度更快、代码更少、强大的streamAPI、便于并行、最大化减少空指针异常 ：Optional

最核心的就是 lambda表达式以及streamAPI

lambda：还是要创造对象的，就是一段代码


设计模式：策略设计模式，面向接口编程
 +
匿名内部类

 =
lambda表达式 可以综合以上
lambda表达式就是一个代码块

基础语法：Java8中引入了一个新的操作符->	

->的：
	左侧：Lambda 表达式的参数列表，对应接口中抽象方法的参数列表
	右侧：Lambda 表达式中需要执行的功能，既Lambda体，对抽象方法的实现

语法格式1：
	无参数，无返回值：
	()-> System.out.println("Hello Lambda!");

语法格式2：
	有一个参数，无返回值：
	(x)->System.out.println(x);
	 
语法格式3：
	只有一个参数，无返回值，小()可以不写
	x->System.out.println(x);
语法格式4：
	有两个以上的参数，并且有返回值，同时有多条语句
	(String first,String second){
		
	}

语法格式5：
	Lambda体中只有一条语句，return 和{}都可以省略不写
	Comparator<Integer> com = (x,y) -> Integer.compare(x,y);
语法格式6：
	lambda的参数列表的数据类型，可以省略不写，jvm有类型推断功能，根据上下文推断出，既类型推断

左右遇一括号省
左侧推断类型省


lambda表达式需要函数式接口的支持：
	函数式接口：接口中只有一个抽象方法的接口，可以使用注解@FunctionInterface修饰，可以检查是否是函数式接口
	最好将lambda表达式看做一个函数而不是一个对象，不过为一个类型为函数式接口的变量赋值时会产生一个对象
	另外要接受lambda表达式可以传递
	到函数式接口



	    四个内置的接口：
    1、消费型：
        Consumer<T> :
            void accept(T t);
    2、供给型：
        Supplier<T> :
            T get();

    3、函数向
        Function<T,R>：
            R apply(T t);
    4、断言型：
        Predicate<T> :
            boolean test(T t);



方法引用：若Lambda 体中的内容有方法已经实现来了，
			我们可以使用”方法引用“。
	可以理解为方法引用是Lambda 表达式的另外一种表现形式 
	
	三种语法格式：

	对象:: 实例方法名。
	
	类:: 静态方法名

	类::实例方法名
注意：Lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法和返回方法一致
	若Lambda 参数列表中的第一参数是 实例方法的调用者，而第二个参数是适合你方法的参数时，可以使用户ClassName::method
	只有当lambda表达式的体只调用一个方法而不做其他操作时，才能把lambda表达式重写为方法引用。例如 ：
		s->s.length() = 0
		这里只有一个方法的调用，但是还有一个比较，so这里不能使用方法引用。


构造器引用
格式：
ClassName::new
注意:需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致。

lambda表达式可以捕获外围作用域中变量的值。只能引用值不会改变的变量，这种变量被称为事实最终变量。
且这个变量不能喝lambda表达式中的局部变量重名。在lambda中使用this关键字，表示调用lambda表达式的方法的this参数。



数组引用：
Type：：new


在Java8之前的版本中，接口中只能声明常量和抽象方法，接口的实现类中必须实现接口中所有的抽象方法。
而在Java8中，接口中可以声明默认方法和静态方法。

Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用“ default ”关键字修饰 。

示例：
public interface MyInterface {
    default String getMsg(String srcMsg){
        return "======"+srcMsg;
    }
}
接口中的默认方法，有一个“类优先”原则：

若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了同一个同名的方法时：

选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称的参数的默认方法会被忽略。
接口冲突。如果一个父接口提供一个默认方法，而另一个接口中也提供了一个具有相同名称和参数
列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突。




接口中的静态方法
在Java8中，接口中允许添加 静态方法，使用方式：“接口名.方法名”。





——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
StreamAPI
	只要是流的概念都是关于操控数据。
	数据源：集合，数组等。-----》转化成流

	--------------》一系列流水线式的中间操作---------》产生一个新流。


	Stream讲的是计算
	
	注意：
		Stream 自己不会存储元素。
		Stream 不会改变源对象
		Stream 相反，这意味着他们会返回一个持有结果的新Stream。
		Stream 操作时延时执行的。这意味着他们会等到需要结果的时候才执行。

	步骤：
		1、创建Stream
			一个数据源（如：集合、数组），获取一个流
		2、中间操作
			一个中间操作连，对数据源的数据进行处理
		2、终止操作
			一个终止操作，执行中间操作链，并产生结果

		数据源->filter->map->...一些列的中间操作哦形成的流水线-> 终止操作
	
	中间操作:
		
		filter--接收Lambda,从流中排出某些元素。
		limit--截断流，使其元素不超过给定得到数量。
		skip(n)--跳过元素，返回一个扔掉了前n个元素对的流。若流中元素不足n个，则返回一个空流。
			与limit(n)互补
		distinct--筛选，通过流生成的hashCoded()和equals()去除重复元素。

		多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，
		否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”
		
		映射
		    map--接收lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到么个元素上
		    flatMap--接受一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连成一个流。	
		
		排序
		    
		    sorted() 自然排序
		    sorted(Comparator com)  定制排序 
		
		查找与匹配

		    allMatch  检查是否匹配所有元素
		    anyMatch  检查是否没有匹配所有元素
		    findFirst  返回第一个元素
		    findAny   返回当前流中的任意元素
		    count 返回流中元素的总个数
		    max  返回流中最大值
		    min  返回流中最小值
		
		归约
			reduce(T identity, BinaryOperator)/reduce(BinaryOperator)
			可以将流中的元素反复结合起来，得到一个值
			
			map-reduce的连接通常为map-reduce模式，因goole用它来进行网络搜索而出名。
			

		收集
			collect 将流转换成其他形式
			Collector接口中方法的实现决定了如何对流执行收集操作(如搜集到List,Set,Map).但是Collectors实用类
			提供了很多静态方法，可以方便地创建常见收集器实例。

	并行流与顺序流
		并行流 就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。
		java8中将并行进行了优化，我们可以很容易的对数据进行并行操作 。StreamAPI可以声明性地通过parallel()与
		sequential()在并行流与顺序流之间进行切换。
	
	Forl/Join 框架
		就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务(拆到不可再拆时)，再讲一个个小任务运算的结果进行join汇总。
		就是线程没有任务 就偷别的线程的。
	fork/Join 框架与传统线程池的区别
		采用“工作窃取”模式(work-stealing):
		当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。
		相对于一般的线程池实现,fork/join框架优势体现在对其中包含的任务的处理方式上.
		在一般的线程池中,如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态.
		而在fork/join框架实现中,如果某个子问题由于等待另外一个子问题的完成而无法继续运行.
		那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程的等待时间,提高了性能.

	Optional 类
		Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，
		原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且
		可以避免空指针异常。

		常用方法：

			Optional.of(T t) : 创建一个 Optional 实例
			Optional.empty() : 创建一个空的 Optional 实例
			Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例
			isPresent() : 判断是否包含值
			orElse(T t) : 如果调用对象包含值，返回该值，否则返回t
			orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值
			map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()
			flatMap(Function mapper):与 map 类似，要求返回值必须是Optional
			

使用 LocalDate、LocalTime、LocalDateTime
	LocalDate、LocalTime、LocalDateTime 类的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供
		了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。	
	注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法.

	计算机所读的时间：instance：用于“时间戳”的运算。它是以Unix元年(传统的设定为UTC时区1970年1月1日午夜时分)开始所经历的描述进行运算
Duration 和 Period
 Duration:用于计算两个“时间”间隔
 Period:用于计算两个“日期”间隔

日期的操纵
	 TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下个周日”等操作。
	 TemporalAdjusters : 该类通过静态方法提供了大量的常用 TemporalAdjuster 的实现。
解析与格式化
	java.time.format.DateTimeFormatter 类：该类提供了三种
	格式化方法：
	 预定义的标准格式
	 语言环境相关的格式
	 自定义的格式
时区的处理
	 Java8 中加入了对时区的支持，带时区的时间为分别为：
		ZonedDate、ZonedTime、ZonedDateTime
	其中每个时区都对应着 ID，地区ID都为 “{区域}/{城市}”的格式例如 ：Asia/Shanghai 等
		ZoneId：该类中包含了所有的时区信息
		getAvailableZoneIds() : 可以获取所有时区时区信息
		of(id) : 用指定的时区信息获取 ZoneId 对象
