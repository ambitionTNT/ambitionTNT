运算符
 
    算术运算符：
        + - * / % ++ --
 
    关系运算符：
        > >= < <= == != 
 
    逻辑运算符：
        & | ! && ||
 
    赋值运算符：
        = += -= *= /= %=
 
    三目运算符：
        布尔表达式 ? 表达式1 : 表达式2
 
    字符串连接运算符：
        +


所有的关系运算符的运算结果都是布尔类型，
			不是true就是false，不可能是其他值。

逻辑运算符两边要求都是布尔类型，并且最终的运算结果也是布尔类型。
		这是逻辑运算符的特点。
	
	100 & true 不行，语法错误。
	100 & 200 不行，没有这种语法。
	true & false 这样可以。

	100 > 90 & 100 > 101 --> false

	& 两边都是true，结果才是true
	| 有一边是true，结果就是true


	赋值运算符：
		1、赋值运算符包括“基本赋值运算符”和“扩展赋值运算符”：基本的、扩展的。
		2、基本赋值运算符？
			=
	
	3、扩展的赋值运算符？
			+=
			-=
			*=
			/=
			%=
			注意：扩展赋值运算符在编写的时候，两个符号之间不能有空格。
				+ =  错误的。
				+= 正确的。
		4、很重要的语法机制：
			使用扩展赋值运算符的时候，永远都不会改变运算结果类型。
			byte x = 100;
			x += 1;
			x自诞生以来是byte类型，那么x变量的类型永远都是byte。不会变。
			不管后面是多大的数字。

条件运算符：（三目运算符。）
		语法格式：
			布尔表达式 ? 表达式1 : 表达式2

		执行原理是什么？
			布尔表达式的结果为true时，表达式1的执行结果作为整个表达式的结果。
			布尔表达式的结果为false时，表达式2的执行结果作为整个表达式的结果。


		1、+ 运算符在java语言中有两个作用。
			作用1：求和
			作用2：字符串拼接

		2、什么时候求和？什么时候进行字符串的拼接呢？
			当 + 运算符两边都是数字类型的时候，求和。
			当 + 运算符两边的“任意一边”是字符串类型，那么这个+会进行字符串拼接操作。

		3、一定要记住：字符串拼接完之后的结果还是一个字符串。