1、集合这块最主要掌握什么内容？
    1.1、每个集合对象的创建（new）
    1.2、向集合中添加元素
    1.3、从集合中取出某个元素
    1.4、遍历集合
    1.5、主要的集合类：
        ArrayList
        LinkedList
        HashSet (HashMap的key，存储在HashMap集合key的元素需要同时重写hashCode + equals)
        TreeSet
        HashMap
        Properties
        TreeMap
2、什么是IO流？
	I：Input;
	O: Output;
	通过IO可以完成硬盘文件的读与写。
3、IO流的分类？
	有很多种分类方法：
   1、按照流的方向进行分类；
    以内存作为参照物，
	往内存中输入数据，称为输入流或者叫做读。
	从内存中输出数据，称为输出流，或者叫做写。

    另一种方式是按照读取数据方式不同进行分类：
      有的流是按照字节的方式进行读取，一次读取1个字节byte,等同于一次读取8个二进制位。
      这种流是万能的，可以读取任何类型的数据，包括，文本、音频、视频文件等...
	假设文件file1.txt，采用字节流的话是这样读的：
                    a中国bc张三fe
                    第一次读：一个字节，正好读到'a'
                    第二次读：一个字节，正好读到'中'字符的一半。
                    第三次读：一个字节，正好读到'中'字符的另外一半
   有的流是按照字符进行读取的，一次读取一个字符这种流是为了方便读取普通文本文件而存在的，
   这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。
   假设文件file1.txt，采用字符流的话是这样读的：
                    a中国bc张三fe
                    第一次读：'a'字符（'a'字符在windows系统中占用1个字节。）
                    第二次读：'中'字符（'中'字符在windows系统中占用2个字节。）
4、Java中的IO流都已经写好了，我们程序员不需要关心,我们最主要还是掌握，
在java中已经提供了哪些流，每个流的特点是什么，每个流对象上的常用方法有
哪些？？？？
	java中所有的流都是在：java.io.*;下。
	 java中主要还是研究：
        怎么new流对象。
        调用流对象的哪个方法是读，哪个方法是写
5、java IO流这块有四大家族：
    四大家族的首领：
    java.io.InputStream  字节输入流；
    java.io.OutputStream 字节输出流；
    java.io.Reader  字符输入流；
    java.io.Writer 字符输出流；
    四大家族的首领都是抽象类。(abstract class)
    
    所有的流都实现了：
                java.io.Closeable接口，都是可关闭的，都有close()方法。
            流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，
            不然会耗费(占用)很多资源。养成好习惯，用完流一定要关闭。

		java.io.Flushable接口，都是可刷新的，都有flush()方法。
            养成一个好习惯，输出流在最终输出之后，一定要记得flush()
            刷新一下。这个刷新表示将通道/管道当中剩余未输出的数据
            强行输出完（清空管道！）刷新的作用就是清空管道。
            注意：如果没有flush()可能会导致丢失数据。

	注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader/Writer”结尾的都是字符流。


6、java.io包下需要掌握的流有16个：
    文件专属：
        java.io.FileInputStream（掌握）
	输入流，读取，字节
        java.io.FileOutputStream（掌握）
	输出流，写入，字节
        java.io.FileReader
        java.io.FileWriter
    转换流：（将字节流转换成字符流）
        java.io.InputStreamReader
        java.io.OutputStreamWriter
		InputStreamReader类是从字节流到字符流的桥接器：它使用指定的字符集读取字节并将它们解码为字符。
		它使用的字符集可以通过名称指定，也可以明确指定，或者可以接受平台的默认字符集。
		每次调用一个InputStreamReader的read（）方法都可能导致从底层字节输入流中读取一个或多个字节。
		为了实现字节到字符的有效转换，可以从基础流中提取比满足当前读取操作所需的更多字节。
		为了获得最高效率，请考虑在BufferedReader中包装InputStreamReader
		把字节流读取的字节进行缓冲而后在通过字符集解码成字符返回，因而形式上看是字符流

    缓冲流专属：
        java.io.BufferedReader
        java.io.BufferedWriter
        java.io.BufferedInputStream
        java.io.BufferedOutputStrea
    数据流专属：
        java.io.DataInputStream
        java.io.DataOutputStream

	数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。

	下面的构造方法用来创建数据输入流对象
	DataInputStream dis = new DataInputStream(InputStream in);


    标准输出流：
        java.io.PrintWriter
        java.io.PrintStream（掌握）

	标准输出流不再指向控制台，指向“log”文件。
        PrintStream printStream = new PrintStream(new FileOutputStream("log"));
        修改输出方向，将输出方向修改到"log"文件。
        System.setOut(printStream);

    对象专属流：
        java.io.ObjectInputStream（掌握）
        java.io.ObjectOutputStream（掌握）

7、java.io.File类。
    File类的常用方法。
8、java io这块还剩下什么内容：
    第一：ObjectInputStream ObjectOutputStream的使用。
    第二：IO流+Properties集合的联合使用。
 
1、拷贝目录。
 
2、关于对象流
    ObjectInputStream
    ObjectOutputStream

   1、 NotSerializableException:
	Student对象不支持序列化！！！

   2、参与序列化和反序列化的对象，必须实现Serializable接口。
   
   3、注意：通过源代码发现，Serializable接口只是一个标志接口：
    public interface Serializable {
    }
    这个接口当中什么代码都没有。
    那么它起到一个什么作用呢？
        起到标识的作用，标志的作用，java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。
        Serializable这个标志接口是给java虚拟机参考的，java虚拟机看到这个接口之后，会为该类自动生成
        一个序列化版本号。
   4、 transient关键字表示游离的，不参与序列化。

   5、java.io.InvalidClassException: bean.Student;
   local class incompatible: stream classdesc serialVersionUID = -400632359059465835, 
   local class serialVersionUID = 2101968418683991450
    java语言中是采用什么机制来区分类的？
        第一：首先通过类名进行比对，如果类名不一样，肯定不是同一个类。
        第二：如果类名一样，再怎么进行类的区别？靠序列化版本号进行区分。
 
    重点：
        参与序列化的类型必须实现java.io.Serializable接口。
        并且建议将序列化版本号手动的写出来。
            private static final long serialVersionUID = 1L;   
   6、   请思考？
        这种自动生成序列化版本号有什么缺陷？
            这种自动生成的序列化版本号缺点是：一旦代码确定之后，不能进行后续的修改，
            因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这个时候java
            虚拟机会认为这是一个全新的类。（这样就不好了！）
   7、最终结论：
        凡是一个类实现了Serializable接口，建议给该类提供一个固定不变的序列化版本号。
        这样，以后这个类即使代码修改了，但是版本号不变，java虚拟机会认为是同一个类。

3、IO + Properties联合使用。
    IO流：文件的读和写。
    Properties:是一个Map集合，key和value都是String类型。
IO+Properties的联合应用。
非常好的一个设计理念：
    以后经常改变的数据，可以单独写到一个文件中，使用程序动态读取。
    将来只需要修改这个文件的内容，java代码不需要改动，不需要重新
    编译，服务器也不需要重启。就可以拿到动态的信息。

    类似于以上机制的这种文件被称为配置文件。
    并且当配置文件中的内容格式是：
        key1=value
        key2=value
    的时候，我们把这种配置文件叫做属性配置文件。

    java规范中有要求：属性配置文件建议以.properties结尾，但这不是必须的。
    这种以.properties结尾的文件在java中被称为：属性配置文件。
    其中Properties是专门存放属性配置文件内容的一个类。
   
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
读入键盘输入，使用 System.in
way1：
  int i = System.in.read();
  System.out.println(i);
  只能读入这种方式及其简单，但是只能读入一个字符，
  且必须是字符类型，输出int类型的话比较麻烦。但是可以比较方便的获取该字符的ascall码。
way2:
	InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(in);
        String name = br.readLine();
        System.out.println("ReadTest Output:" + name);
way3:
	  Scanner sc = new Scanner(System.in);

	  int i = sc.nextInt();//读取int
	  float f = sc.nextFloat();//读取float
	  String s = sc.nextLine();//读取字符串

	  System.out.println(i);
	  System.out.println(f);
	  System.out.println(s);
	这种方式使用java5之后添加的Scanner类，Scanner类提供了读取int，float及字符串的方法，使用十分方便。

	同时，Scanner不仅可以读取键盘输入值，也可以读取文件内容，只需要将构造方法中的数据来源切换成该文件即可。


 