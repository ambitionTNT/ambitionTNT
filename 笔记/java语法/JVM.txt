Bootstrap ClassLoader，主要加载JVM自身工作需要的类。
Extension ClassLoader，主要加载%JAVA_HOME%\lib\ext目录下的库类。
Application ClassLoader，主要加载Classpath指定的库类，一般情况下这是程序中的默认类加载器，也
是ClassLoader.getSystemClassLoader() 的返回值。（这里的Classpath默认指的是环境变量中配置的Classpath，
但是可以在执行Java命令的时候使用-cp 参数来修改当前程序使用的Classpath）

JVM加载类的实现方式，我们称为 双亲委托模型：

如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委托给自己的父加载器，
每一层的类加载器都是如此，因此所有的类加载请求最终都应该传送到顶层的Bootstrap ClassLoader中，
只有当父加载器反馈自己无法完成加载请求时，子加载器才会尝试自己加载。
双亲委托模型的重要用途是为了解决类载入过程中的安全性问题。
假设有一个开发者自己编写了一个名为Java.lang.Object的类，想借此欺骗JVM。
现在他要使用自定义ClassLoader来加载自己编写的java.lang.Object类。然而幸运的是，
双亲委托模型不会让他成功。因为JVM会优先在Bootstrap ClassLoader的路径下找到java.lang.Object类，并载入它。


程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的信号指示器（偏移地址），
Java编译过程中产生的字节码有点类似编译原理的指令，程序计数器的内存空间存储的是当前执行的字节码的偏移地址，
每一个线程都有一个独立的程序计数器（程序计数器的内存空间是线程私有的），
因为当执行语句时，改变的是程序计数器的内存空间，因此它不会发生内存溢出 ，
并且程序计数器是jvm虚拟机规范中唯一一个没有规定 OutOfMemoryError 异常 的区域；

java虚拟机栈：线程私有，生命周期和线程一致。描述的是 Java 方法执行的内存模型：
每个方法在执行时都会床创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。
每一个方法从调用直至执行结束，
就对应着一个栈帧从虚拟机栈中入栈到出栈的过程。  没有类信息，类信息是在方法区中

java堆：对于绝大多数应用来说，这块区域是 JVM 所管理的内存中最大的一块。线程共享，主要是存放对象实例和数组
方法区：属于共享内存区域，存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
TLAB只是堆空间中很小的一块区域，线程在会优先把对象存储在TLAB中，如果TLAB存不下了再存入共享的堆空间中，
并非所有对象和数组都是存在这里的



一、 程序计数器
一块较小的内存空间，可以看作是当前线程所执行的字节码的信号指示器。在虚拟机的概念模型里面，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要以来这个计数器完成。

由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正常的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。

如果线程正在执行的是一个Java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，计数器值应为空（Undefined）。

二、 Java虚拟机栈
与程序计数器一样，它也是线程私有的。

Java虚拟机栈描述的是Java方法执行的线程内存模型：
每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。

什么是局部变量表：
存放了编译器可知的各种Java虚拟机基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，她并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。

这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）来表示，其中64位长度的long、double类型的数据会占用两个变量槽，其余的只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。

三、 Java堆
Java堆（Java Heap）虚拟机管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。

此内存的唯一目的就是：存放对象实例。

因此，Java堆也是垃圾收集器管理的内存区域。


四、 方法区
与Java堆一样，方法区是各个线程共享的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。



接口
JDK1.7接口内容：
抽象方法：public  abstract 返回值类型  方法名(参数);    （public  abstract  可以省略，可以全部省略，也可以省略某一个）
常量：public static final  类型 变量名 = 值;    （public static final  可以省略，可以全部省略，也可以省略某一个）
1.8：
默认方法：public  default  返回值类型  方法名(参数){方法体}      （public  可以省略，default不能省略）
       接口的默认方法，可以直接使用实现类的对象进行调用也可以在实现类中对其进行覆盖重写。
静态方法：public  static  返回值类型  方法名(参数){方法体}      （public  可以省略，static不能省略）
       因为静态方法不可以实例化，在接口中也是一样的所以在接口中定义静态方法的作用就是静态方法的作用，不需要实例化，直接使用，节省内存空间。
1.9：
私有方法：private  返回值类型  方法名(参数){方法体}   （不能省略private）