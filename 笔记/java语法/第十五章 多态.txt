 
3、多态的基础语法
     
    3.1、向上转型和向下转型的概念。
 
        向上转型：子--->父 (upcasting)
            又被称为自动类型转换：Animal a = new Cat();
 
        向下转型：父--->子 (downcasting)
            又被称为强制类型转换：Cat c = (Cat)a; 需要添加强制类型转换符。
            什么时候需要向下转型？
                需要调用或者执行子类对象中特有的方法。
                必须进行向下转型，才可以调用。
            向下转型有风险吗？
                容易出现ClassCastException（类型转换异常）
            怎么避免这个风险？
                instanceof运算符，可以在程序运行阶段动态的判断某个引用指向的对象
                是否为某一种类型。
                养成好习惯，向下转型之前一定要使用instanceof运算符进行判断。
         
        不管是向上转型还是向下转型，首先他们之间必须有继承关系，这样编译器就不会报错。
 
    3.2、什么是多态。
        多种形态，多种状态，编译和运行有两个不同的状态。
        编译期叫做静态绑定。
        运行期叫做动态绑定。
        Animal a = new Cat();
        // 编译的时候编译器发现a的类型是Animal，所以编译器会去Animal类中找move()方法
        // 找到了，绑定，编译通过。但是运行的时候和底层堆内存当中的实际对象有关
        // 真正执行的时候会自动调用“堆内存中真实对象”的相关方法。
        a.move();
 
        多态的典型代码：父类型的引用指向子类型的对象。（java中允许这样写代码！！！）
 
    3.3、什么时候必须进行向下转型？
        调用子类对象上特有的方法时。


	新的内容，运算符：
				instanceof （运行阶段动态判断）
			第一：instanceof可以在运行阶段动态判断引用指向的对象的类型。
			第二：instanceof的语法：
				(引用 instanceof 类型)
			第三：instanceof运算符的运算结果只能是：true/false
			第四：c是一个引用，c变量保存了内存地址指向了堆中的对象。
				假设(c instanceof Cat)为true表示:
					c引用指向的堆内存中的java对象是一个Cat。
				假设(c instanceof Cat)为false表示:
					c引用指向的堆内存中的java对象不是一个Cat。
			
			程序员要养成一个好习惯：
				任何时候，任何地点，对类型进行向下转型时，一定要使用
				instanceof 运算符进行判断。（java规范中要求的。）
				这样可以很好的避免：ClassCastException

多态的应用：
软件在扩展新需求过程中，修改Master这个类有什么问题？
  一定要记住：软件在扩展过程中，修改的越少越好。
  修改的越多，你的系统当前的稳定性就越差，未知的风险就越多。
  其实这里涉及到一个软件的开发原则：
  软件开发原则有七大原则：
	其中就有一条最基本的原则：OCP（开闭原则）
  什么是开闭原则？
    对扩展开放（你可以额外添加），对修改关闭（最好很少修改现有程序）。
    在软件的扩展过程中，修改的越少越好。
  高手开发项目不仅仅为了实现客户的需求，还需要考虑软件的扩展性。

  什么是软件扩展性：
	假设电脑的内存条部件坏了，只需换个新的。
	这便是扩展性。