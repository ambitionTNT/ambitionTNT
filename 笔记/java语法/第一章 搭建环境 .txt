1、常用的DOS命令
  1.1、什么是DOS命令
	是一些命令接口，一些功能子程序。可以完成文件的新建、编辑、保存、删除等
	一些列操作。
  1.2、默认情况DOS定位在C:\Users\Administrator
  1.3、复制内容：
	win7 :在任意位置点击右键-->标记-->选中要复制的内容->>点击右键
	win10：左键直接选中，然后右键点击一次就反搜剪贴板里了
  1.4、切换盘符：D:+回车。
  1.5、切换目录：cd命令（change director【改变目录】）
	cd 路径
	cd ..回到上一目录、
	cd \ 回到根目录
	cd . 当前目录 
  1.6、cls 清屏
  1.8、dir 查看目录内容
  1.10、exit 退出DOS命令窗口
  1.11、del 删除文件 del * 删除所有
  1.12、查看本机ip地址，ip相当于一个网络中的计算机的电话号码
	ipconfig(ip地址配置信息)+/all 看更多的信息
  1.13、怎么查看两台计算机是否可以正常通讯？
	ping命令
		ping 域名\IP地址 
		                 + -t 会一直发包，可以查看网络是否稳定
		Ctrl c 强制终止一个命令
		域名最后还会解析为ip地址形式
2、java特性
  2.1、在Java语言中真正操作内存的是JVM(java虚拟机)
	在所有的java程序都是运行在java虚拟机当中的。
	而java虚拟机执行过程中再去操作内存。
	对于c或者c++来说程序员都是通过指针来操作指内存的，更加灵活但是技术要求更高。
	java语言屏蔽了指针概念，程序员安不能直接操作指针，或者说程序员不能直接操作内存。
	   优点：不容易导致内存泄漏
	   缺点：效率问题，驾驭感比较差。
	
  2.2、内存
	对于计算机来说，最主要的是cup、内存、硬盘、主板...
	内存就是程序运行过程中临时存储的数据空间
	断电后或者关机后内存中的数据也会消失
       硬盘
	持久化设备
       主板 
	把各部件组织起来
  2.3 面向对象
	采用面向对象的方式可以让复杂问题简单化
  2.4、健壮性
	主要是因为java中有一种机制：自动垃圾回收机制(GC)
	jvm负责调度GC机制，程序员不需要干涉 
	可能不能及时清理，效率不如c/c++ 
	java编译器可以检测其他语言中仅在运行时才能够检测出来的问题。
  2.5、支持多线程
  2.6 可移植性/跨平台/体系结构中立
	java语言只要编写一次，可以做到到处运行。
	例如：java程序编写完之后，可以运行在windowsOS上，不需要做任何的改动
	可以直接运行在LinuxOS上，同样也可以运行在MaCOS上面
	原因是JVM，java程序实际并没有直接与OS打交道，java程序与JVM打交道，而JVM与OS打交道
	JVM屏蔽了OS之间的差异，JVM是通过安装JDK来的。所以JDK也有不同版本的,Linux 与Windows班的等

	JVM这种机制实现了跨平台，那么这种机制优点和缺点？
		优点：一次编写到处运行，可以跨平台
		缺点：麻烦。对于java程序来说必须先有一个JVM


  2.7 JDK\JRE\JVM 三者之间的关系
	JDK:Java开发工具箱
	JRE:Java运行环境
	JVM:Java虚拟机
	
	JDK包括JRE,JER包括JVM

	JVM是不能独立安装的
	JRE和JDK 都是可以独立安装的
	有单独的JDK、JRE安装包
	但是没有单独的JVM安装包

	安装JDK的时候，JRE就自动安装了，同时JRE内部的JVM也就自动安装了
	安装JRE的时候，JVM也就自动安装了。

	部署软件时，只需安装JRE 体积小，安装便捷。
   2.8
	JavaSE:标准版
	JavaEE:企业版
	JavaME:微型版

   2.9简单性
	java比较简单，还可以支持开发能够在小型机器运行的软件如 javame
   2.10分布式
	java可以通过URL打开网络上的对象
3、Java的加载与执行
	3.1 过程
	非常重要的两个阶段
	编译阶段和运行阶段
	直接编写的Java代码(普通文本)是无法执行被JVM识别的。Java代码这种普通文本必须通过一个编译，将这个普通文本变成字节码，
	JVM能够识别字节码，这个过程称为编译。

	java代码这种普通文本称为Java源代码。源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”，JVM可以识别的是字节码。
	编译阶段和运行阶段可以在不同的OS上完成。
		可以在Windows上编译，编译之后放在Linux上运行，因为java是跨平台的，可以做到一次编写到处运行。

	java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？
        完全可以执行，因为源代码不参与程序的执行过程。
        参与程序执行过程的是字节码。
        但是最好不要删除源代码。因为有可能执行结果不是你需要的，
        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，
        然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。

	源代码的文件扩展名必须是xxx.java。
	.java文件就是源文件，这个文件中编写源代码。

	字节码的文件扩展名必须是xxx.class。
	.class文件就是字节码文件，这个文件是编译源代码而得到的。

	需要注意的是：1个java源文件是可以编译生成多个class文件的，最终运行的是class文件。

	问题：字节码文件是二进制文件吗？
		字节码文件不是二进制文件。
		如果是二进制的话，就不需要JVM了。
		因为操作系统可以直接执行二进制。
	
	java程序从开发到运行的过程：
	编译期：
	第一步：建立一个xxx.java文件，编写好源文件。
	第二步：使用编译器javac.exe(JDK安装自带)对xxx.java文件进行编译成xxx.class的字节码文件
	运行期：
	第三步：使用java命令执行字节码，这是JVM就开始启动了，JVM通过classLoader 从硬盘上找到xxx.class文件进行装载，字节码文件被装载到虚拟机后，
		JVM对字节码进行解释，最终解释为二进制码然后OS在通过二进制码与硬件平台进行交互。

	注意：在以上的过程中，需要使用两个非常重要的命令？
              javac 命令，负责编译
              java 命令，负责运行
	源文件中编写的代码叫做：源代码。
	以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？
		新建java文件
		打开java文件
		写java源代码
		保存
		javac命令编译
		java命令运行
 
	        编写、编译、运行

3、开发第一个java程序：HelloWorld.
   3.1、程序在编写过程中要注意保存，java源代码只要修改，必须重新编译，生成新的class字节码文件。
   
   3.2、编译阶段
	需要使用javac命令对源文件进行编译。
	这个命令需要先测试一下，打开DOS窗口 试验一下，让OS找到“javac.exe”命令在哪里。
	如果出错，是因为没有配置环境变量：
	  配置环境变量path的步骤：
            桌面计算机上右键-->属性-->高级系统设置-->环境变量
            怎么修改path环境变量？
                找到path，鼠标双击！！！！
            path环境变量当中都是路径，路径和路径之间必须采用“半角的分号”分隔。
         
        让javac.exe能用，我们配置哪个路径到path中？
            将C:\Program Files\Java\jdk-8.0.2\bin配置到path当中。
 
         
        注意：环境变量包括“系统变量”和“用户变量”
            系统变量：范围比较大，系统变量会让计算机所有用户都起作用。
            用户变量：范围比较小，这个变量只是作用于当前用户。
         
        怎么查看编译器版本？
            C:\Users\Administrator>javac -version
            javac 8.0.2    
         
        怎么查看java虚拟机的版本？
            C:\Users\Administrator>java -version
            java version "13.0.2" 2020-01-14
            Java(TM) SE Runtime Environment (build 13.0.2+8)
            Java HotSpot(TM) 64-Bit Server VM (build 13.0.2+8, mixed mode, sharing)

	    问题1：path环境变量的作用是什么？
		path环境变量的作用就是给WindowsOS指路的。
		告诉WindowsOS去哪找这个命令文件。
		path环境变量有很多很多路径，路径与路径之间用半角分号分隔。
		path=A,B,C,D...
		path是环境变量的名字。
		A,B,C,D...是环境变量path的值。

	    问题2：path环境变量是java中的机制，还是WindowsOS中的机制？
		path环境变量本质上是隶属于WindowsOS的，和java没有关系。
		java只不过用了一下path环境变量。

		path环境变量的配置要融会贯通，学一通百：
		只要安装其他软件，在DOS中使用这个软件的命令出现 命令找不到错误后，就可以去尝试配置一下环境变量。
		  


	    ------------------------------------------------------------------------------------------------------------------
		javac命令的使用：
		javac java源文件的路径
		 注意：路径包括绝对与相对路径。


     3.3、运行阶段
       运行阶段的前提是：class文件（字节码）生成了。没有字节码文件程序无法运行的。
       生成的xxx.class xxx就是一个类名。
        
	使用JDK目录下的：java.exe命令来运行。
	
	语法格式：java 类名
	
	要注意 目录要写到xxx.class文件目录内。	
        千万千万要注意：java这个命令，后面跟的是“类名”，而绝对不能跟“文件路径”，
        因为java命令后面跟的不是文件，是一个“类名”。

     3.4、“java HelloWrold” 的执行原理和过程。
	第一步：会先启动JVM 
	第二步：JVM启动后，JVM回去启动类加载器
		类加载器的作用：加载类的。本质上类加载器会去硬盘上找“类”对应的“字节码文件”。
		假设是"java HelloWorld",那么类加载器回去硬盘上搜索：HelloWorld.class文件。
		...
	第三步：类加载器如果在硬盘上找不到对应的字节码文件，会报错，报：找不到或无法加载主类。
		类加载器如果找到了，会将字节码文件装载到JVM当中，JVM启动“解释器”将字节码解释为“011001010101...”的二进制码，
		OS执行二进制码和硬件交互。

		        
	问题？？？？？
	  默认情况下，类加载器去硬盘上找“字节码”文件的时候，默认从哪找？？？？
	       默认情况下类加载器（classloader）会从当前路径下找。
		 能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件。
		答案：可以的。但是我们需要设置一个环境变量，叫做：classpath
		classpath是一个环境变量，是给谁指路的？
	 答案：是给“类加载器”指路的。
     
	 classpath环境变量不属于windows操作系统，classpath环境变量隶属于java。
 
		 classpath环境变量是java特有的。
		 classpath=A路径;B路径;C路径.....
		classpath是一个变量名
		 A路径;B路径;C路径.....是变量值

	我们把classpath配置一下，这个环境变量在windows中没有，需要新建！！！！
        计算机-->右键-->属性-->高级系统设置-->环境变量-->新建...
     
    注意：变量名不能随意写：大小写无所谓，但必须叫做：classpath
        CLASSPATH
        ClassPath
        Classpath
        classpath
        都行。
     
    我目前是随意配置的：（重启CMD）
        classpath=D:\course
        非常重要的一个特点，必须记住：
            配置了classpath=D:\course之后，类加载器只会去D:\course目录下找“xxx.class”文件
            不再从当前路径下找了。
         
        结论是：
            到目前为止：classpath环境变量不需要配置。
            但你必须理解classpath环境变量是干什么的！！！！
     
    你一定要理解classpath环境变量的作用是什么？
        是给类加载器指路的。
        在没有配置环境变量classpath的时候，默认从当前路径下加载。
        如果配置了环境变量classpath的话，就只能从指定的路径下加载了。
 
    path java_home classpath，这3个环境变量path需要配置，后面两个暂时不配置。


    4、java注释
	4.1 //单行注释
	4.2 /* 
		多行注释
	    */
	 4.3
	 /**
	 *javadoc注释，可以提取提取信息 称为帮助文档。
	 */


    5、代码
	5.1、在Java中任何有效的代码必须写到”类体“中，最外层必须是一个类。
	5.2、public表示公开 class表示定义 一个类，Test 是一个类名。类名后边必须是
		一对大括号，这一对大括号被称为“类体”。
	5.3、大括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。
		{}
		[]
		()

	5.4、什么时候代码缩进？
		我包着你，你就比我低一级。你就需要缩进。
		没有合理的缩进，代码可读性很差。
		或者也可以这样所，大括号里的都需要缩进。
		缩进就是可读性问题，不缩进也不影响程序的编译和执行。
	